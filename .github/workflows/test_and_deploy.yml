name: tests

on: [push, pull_request]

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: checkout source
        uses: actions/checkout@v2
      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - name: cache stuff
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.pythonLocation }}
            ~/.cache/pre-commit
          key: |
            pre-commit-${{ env.PY }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: install dependencies
        run: pip install pre-commit
      - name: Install pre-commit hooks
        run: pre-commit install
      # This will run on all files in the repo not just those that have been
      # committed. Once formatting has been applied once globally, from then on
      # the files being changed by pre-commit should be just those that are
      # being committed - provided that people are using the pre-commit hook to
      # format their code.
      - name: run pre-commit
        run: pre-commit run --all-files --color always

  test:
    needs: linting
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9]
        exclude:
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            python-version: 3.8
          - os: windows-latest
            python-version: 3.7
          - os: windows-latest
            python-version: 3.8
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Test
        run: pytest
      - name: Coveralls
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            pip install coveralls
            coveralls --service=github

  deploy-source:
    needs: test
    if: contains(github.ref, 'tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: "3.x"
    - name: Publish source distribution dist to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
      run: |
        pip install twine
        python setup.py sdist
        twine upload dist/*


  deploy-linux-wheels:
    needs: test
    if: contains(github.ref, 'tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
    - name: Build manylinux Python wheels
      uses: RalfG/python-wheels-manylinux-build@v0.3.2-manylinux2014_x86_64
      with:
        python-versions: 'cp37-cp37m cp38-cp38 cp39-cp39'
    - name: Publish wheels to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
      run: |
        pip install twine
        twine upload dist/*-manylinux*.whl

  deploy-windows-wheels:
    needs: test
    if: contains(github.ref, 'tags')
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
          python-version: ${{ matrix.python-version }}
    - name: Publish wheels to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
      run: |
        pip install twine wheel
        python setup.py bdist_wheel
        twine upload dist\*

  deploy-macos-wheels:
    needs: test
    if: contains(github.ref, 'tags')
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
          python-version: ${{ matrix.python-version }}
    - name: Publish wheels to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
      run: |
        pip install twine wheel
        python setup.py bdist_wheel
        twine upload dist/*
