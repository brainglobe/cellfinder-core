name: tests

on: push

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
          python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8
    - name: Lint
      run: |
        black ./ --check
        flake8

  ubuntu-latest:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools tox tox-gh-actions
      - name: Test with tox
        run: tox
      - name: Coveralls GitHub Action
        uses: coverallsapp/github-action@v1.1.2

  # On windows, only test 3.8
  win:
    needs: lint
    name: ${{ matrix.platform }} (3.8)
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [windows-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools tox tox-gh-actions
      - name: Test with tox
        run: tox
        env:
          PLATFORM: ${{ matrix.platform }}

  deploy-source:
    needs: [ubuntu-latest, win]
    if: contains(github.ref, 'tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: "3.x"
    - name: Publish source distribution dist to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
      run: |
        pip install twine
        python setup.py sdist
        twine upload dist/*


  deploy-linux-wheels:
    needs: [ubuntu-latest, win]
    if: contains(github.ref, 'tags')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
    - name: Build manylinux Python wheels
      uses: RalfG/python-wheels-manylinux-build@v0.3.2-manylinux2014_x86_64
      with:
        python-versions: 'cp37-cp37m cp38-cp38'
    - name: Publish wheels to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
      run: |
        pip install twine
        twine upload dist/*-manylinux*.whl

  deploy-windows-wheels:
    needs: [ubuntu-latest, win]
    if: contains(github.ref, 'tags')
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
          python-version: ${{ matrix.python-version }}
    - name: Publish wheels to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
      run: |
        pip install twine wheel
        python setup.py bdist_wheel
        twine upload dist\*
